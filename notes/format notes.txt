Values are stored little endian on Windows, but big endian on Macintosh.  This is VERY handy since re-exporting the same file to both formats will tend to reveal the byte swap locations in the binary data, making it way easier to determine the size of values.  However, many data types are NOT the same size on both platforms.

Files don't appear to use any kind of context-free structure, objects are just stored sequentially, which means it's impossible to parse a file without knowing the binary layout of each object type.  A common paradigm seems to be a 32-bit ID followed by a revision number, frequently followed by what look like some sort of 32-bit ID and then a size field.  However, the size field is VERY frequently misleading, or its meaning hasn't been determined yet.  Sometimes it represents the size of the entire object starting from the type ID to the next type ID, sometimes it represents the size of a specific data chunk, sometimes it's not even there.

However, components must be modular - the editor will allow you to load a project even if the modifier's extension was removed, so they are clearly separable.

The asset table from mTropolis 1.1 contains file positions for assets, but Obsidian doesn't.  Obsidian appears to have been created with a later version, maybe 1.1.1 or 1.1.2 - 2.0 was released long after Obsidian's launch.

The asset types are the same as the DataObject types - e.g. if he asset type is 0x55, then the data object will be 0x55.  All assets appear to be size-tagged.


There are 6 types of assets: PICTs, mToons, sounds, QuickTime (movies and QTVR panoramas), MIDI, color tables.  There's an additional asset type, 0x1f, which is currently unknown, and appears to be generated on export rather than corresponding to an asset file.  0x1f assets are always unnamed.  Based on some data inspection, it looks like image frames for mToons.

32-bit images are stored bottom-up on Windows and top-down on Mac.

Color tables are 16 bit per channel in Mac builds and 8 bit per channel in Win builds.  Looks like indexes 0 and 255 are hard-coded to black and white respectively on Windows.

Deleting unused assets will generally wipe the "Macintosh 8bit" color table from the boot stream.

Most things that are named write the name last, which is fairly handy for locating the next object.  Unfortunately, most things that are "Unnamed" in the mTropolis editor have blank names, leading to zeroes in the data that may be mis-parsed if they contain data.

Rectangles on Mac are top, left, bottom, right
Rectangles on Win are left, top, right, bottom
Due to endian differences, this can make rectangles appear to be a pair of 32-bit integers from byte swaps.

EVENT:
	uint32_t event code
	uint32_t event additional info

POINT:
	Mac:
		int16_t top
		int16_t left
	Win:
		int16_t left
		int16_t top
	

Author messages are event code 900 and the additional event info is the author message ID

Asset streams appear to always be empty in built projects.

Aliased objects are stored in the boot stream.


Global header:

struct MGlobalHeader
{
	uint16_t platform;		// 00   0 = Mac, 1 = Windows
	uint32_t magic;			// 02   0xa5a555aa
	uint32_t unknown;		// 06   Always 0
	uint32_t unknown;		// 0a   Always 14
	uint32_t unknown;		// 0e   Always 1002
	uint16_t unknown;		// 12   Always 0
	uint32_t unknown;		// 14   On Win, 0x0100004b, on Mac, 0x0000004a
	uint32_t unknown;		// 18   Always 0x14
	uint16_t unknown;		// 1c   Always 0
	uint32_t unknown;		// 1e   Always 0x22
	uint32_t unknown;		// 22   Always 0x000003e8
	uint16_t unknown;		// 26   2 in tests, 3 in Obsidian
	uint32_t unknown    	// 28   On Win, 0x0100004b, on Mac, 0x0000004a
	uint32_t unknown    	// 2c   0xb3 in tests, 0xd928 in Obsidian
	uint16_t numStreams;    // 30
	uint16_t unknown;		// 32   Always 0
	uint16_t unknown;		// 34   Always 1
	uint16_t numSegments;   // 36
};


Win:
01 00 a5 a5 55 aa 00 00 00 00 0e 00 00 00 ea 03
00 00 00 00 4b 00 00 01 14 00 00 00 00 00 22 00
00 00 e8 03 00 00 02 00 4b 00 00 01 b3 00 00 00
04 00 00 00 01 00 01 00
Mac:
00 00 aa 55 a5 a5 00 00 00 00 00 00 00 0e 00 00
03 ea 00 00 00 00 00 4a 00 00 00 14 00 00 00 00
00 22 00 00 03 e8 00 02 00 00 00 4a 00 00 00 b3
00 04 00 00 00 01 00 01


Obsidian catalog entries are 42 bytes apart, but 1.1 exports are only be 34 bytes apart.  This probably means 0x3e8 is a stream table data object and the 2 vs 3 is revision.


Scene format:
uint32_t 000003e9
uint16_t 0
uint32_t 0100004b (win) or 0000004a (mac)
uint32_t 0x26
char[24] scene name
uint32_t 7
uint16_t 2
uint32_t 8
uint32_t 0x38 (56)
uint32_t 0x5c8f
Win: 00 00 00 10 00 00 01 00 00 00
Mac: 00 00 00 00 10 00 00 01 00 00
Rect COORDINATES
Rect COORDINATES
uint32_t 0x02000000
byte[8] zero fill
uint32_t 0x0000000e
uint16_t 1
uint32_t 0100004b (win) or 0000004a (mac)
uint32_t 0x000011fe on Mac, 0x000011dc on Win  - EOF is the next position + this value



Label object type: 0x1f
Text labels have 24 bytes of unknown purpose after the text on Mac only

Appears to be revision-tagged.


Scene format:
TData type 3e9 size 38
char[16] scene name
uint16_t build ID?
byte[6] 00 0a 73 e8 00 00

Object table:
uint32_t type ID
uint16_t revision
uint32_t flags?  (0x80 flag = final object?)
uint32_t size (including tag)


-------------------------------------------------------------------------------------------
KNOWN DATA OBJECT TAGS AND FORMATS
-------------------------------------------------------------------------------------------
0x15: Text label object.  Known revisions: 0
uint32_t unknown (0)
uint32_t unknown (0x10000 range but varies)
uint16_t unknown - 16 - Font size?
uint32_t unknown (0x02001000)
uint16_t unknown (1)
uint16_t unknown (0)
WIN: uint16_t unknown (0x1700)
RECT rect
RECT rect
--- Data note: 0x54 on Win, 0x52 on Mac
uint32_t unknown (appears to be globally unique ID)
WIN: byte[8] unknown (zero fill)
MAC: byte[30] unknown
char[variable] name (remainder)


0x27: Alias.  Known revisions: 0



0x3c0: Unknown.  Seen in boot segment after stream header.  Known revisions: 2
uint32_t marker
uint32_t size including tag



0x3e9: Stream header.  Known revisions: 0
uint32_t marker
uint32_t size including tag?  always 0x26
char[16] name
uint16_t random build ID?
byte[6] unknown - always 00 0a 73 e8 00 00


0x3ec: Unknown.  Appears in boot stream before asset table.  Known revisions: 2
uint32_t marker
uint32_t size including tag
???


0xd: Boot stream asset table.  Known revisions: 4
uint32_t marker (observed with 0x100 flag in Obsidian Win)
uint32_t unknown - Appears to be 22 + length of concatenated name strings.
uint32_t unknown
uint32_t number of assets
ASSET[number of assets]:
	uint32_t flags1 (1 = deleted?  2 = limit one per segment)
	uint16_t length of name
	uint16_t unknown2 - Always 0
	uint32_t unknown3 - Always 0x136 in Obsidian, but in exported projects tends to vary.  Appears to be containing scene ID.
	uint32_t unknown4 - Always e990055a in Obsidian, but in exported projects this appears to be the file position of the DataObject. This will contain a stale value if the asset isn't actually included.
	uint32_t asset type (0x02 = Color table, 0x0e = Image, 0x10 = mToon, 0x54 = Sound, 0x55 = Movie, 0x5c = MIDI, 0x1f = Not sure, appears to be an image, always nameless)
	uint32_t flags2
	char[length of name] name (null terminated)


0x19: Unknown.  Appears in boot stream after asset table.  Known revisions: 0
	uint32_t marker
	uint32_t size including tag   always 0x10
	byte[2] unknown - Always 00 00


0x1e: Color table asset.  Known revisions: 0
NOTE: Color tables are always padded to 256 colors even if the CLUT file contained fewer actual colors.

uint32_t marker
uint32_t size including tag
byte[4] unknown (0 on Mac, garbage on Windows)
uint32_t asset ID
uint32_t unknown (0)

Windows format:
	byte[14] unknown
	For each color (256):
		uint8_t blue
		uint8_t green
		uint8_t red
		uint8_t unused

Mac format:
	byte[20] unknown
	MacOS clut header:
		uint32_t seed
		uint16_t flags (0x8000 = for indexed device  0x0000 = for pixel map)
		uint16_t number of colors minus one
		
	For each color (256)
		uint16_t color index
		uint16_t red
		uint16_t green
		uint16_t blue


0x22: Project label map.  Known revisions: 0
uint32_t marker
uint32_t unknown (0x16) - possibly size and offset to "5" field
uint32_t number of supergroups (5)
uint32_t next available ID

For each supergroup:
	uint32_t name length
	uint32_t unknown (varies)
	uint32_t unknown (0)
	char[name length] name
	uint32_t number of children
	For each child (label tree entry):
		uint32_t length of name
		uint32_t is group
		uint32_t id
		uint32_t unknown (0)
		uint32_t flags (0x80000000 = expanded in editor?)
		char[length of name] name - not null terminated
		if group:
			uint32_t number of children
			children (recursive - label tree entry format)

0x2: Project structural def.  Known revisions: 1, 2  (No known differences between formats)
	uint32_t unknown
	uint32_t size including tag
	uint32_t unknown (large number)
	uint32_t unknown (0x00800008 in tests, 0x00800009 in Obsidian)
	uint16_t length of data file name
	char[length of data file name] name of data file - null terminated

0x3: Section structural def.  Known revisions: 1
	uint32_t unknown
	uint32_t size including tag
	byte[4] unknown
	uint16_t length of name
	byte[12] unknown
	char[length of name] name - null terminated

0x21: Subsection structural def.  Known revisions: 0
	uint32_t unknown
	uint32_t size including tag
	byte[4] unknown
	uint16_t length of name
	byte[6] unknown
	char[length of name] name - null terminated

0x5: QuickTime movie structural def.  Known revisions: 2
	1103/cf5
	uint32_t unknown (8)
	uint32_t size including tag
	uint32_t unknown
	uint16_t length of name
	uint32_t structural flags
	byte[46] unknown (first 24 bytes have unclear meaning and appear to be platform-independent so far?)
	uint16_t section id
	byte[2] unknown (0)
	RECT rect1
	RECT rect2
	uint32_t asset id
	uint32_t unknown (appears as 6000000 decimal - possibly scaled framerate or timing-related)
	uint16_t volume (out of 100)
	uint32_t animation flags (0x2000000 = play every frame)
	byte[4] unknown (byte sequence - similar by platform)
	byte[4] unknown (byte sequence - differs by platform)
	uint32_t stream locator
	byte[4] unknown
	char[length of name] name - null terminated

0x6: mToon structural def.  Known revisions: 2
	uint32_t unknown (0)
	uint32_t size including tag
	uint32_t unknown
	uint16_t length of name
	uint32_t structural flags
	byte[2] unknown
	uint32_t animation flags (0x28000000)
		0x2000000 = Maintain rate
		0x8000000 = Loop
	byte[4] unknown (zeros)
	uint16_t section ID
	RECT rect1
	RECT rect2
	uint32_t unknown (0xa)
	uint32_t rate * 10000
	uint32_t stream locator
	uint32_t unknown (layer?)

0x7: Image structural def.  Known revisions: 2
	uint32_t unknown (8)
	uint32_t size including tag
	uint32_t unknown
	uint16_t length of name
	uint32_t unknown (probably structural flags)
	byte[2] unknown
	uint16_t section ID
	DORect rect1
	DORect rect2
	uint32_t unknown
	uint32_t unknown
	byte[4] unknown (0)

0x8: Scene structural def.  Known revisions: 1
	uint32_t unknown
	uint32_t size including tag
	uint32_t unknown
	uint16_t length of name
	uint32_t structural flags
	byte[2] unknown
	uint16_t section ID
	DORect rect1
	DORect rect2
	uint32_t stream locator  (1-based stream index, sometimes observed with 0x10000000 flag set, not sure of the meaning)
	byte[4] unknown

0xfffffffe: Unknown, appears to be object deletion debris.  Known revisions: 0
	uint32_t marker
	uint32_t size including tag (0x0e)

0x2c6: Behavior modifier.  Known revisions: 1
	uint32_t unknown (0x22)
	uint32_t size including tag (but not children)
	byte[2] unknown (0)
	uint32_t unknown - Changes erratically
	uint32_t unknown - Sometimes same as previous sometimes, sometimes 0
	uint16_t unknown
	uint32_t unknown - Changes erratically
	POINT editor layout position
	uint16_t length of name
	uint16_t number of children
	char[length of name] name - null terminated
	uint32_t flags?  1 = Switchable
	EVENT "enable when"
	EVENT "disable when"
	byte[2] unknown (0)
	For each child:
		child object

0x3c0: Miniscript modifier

0x2da: Messenger modifier

0x2bc: If Messenger modifier

0x2e4: Timer Messenger modifier

0x2f8: Boundary Detection Messenger modifier

0x2ee: Collision Detection Messenger modifier

0x302: Keyboard Messenger modifier

0x321: Boolean Variable modifier

0x2c7: Compound Variable modifier

0x322: Integer Variable modifier

0x329: String Variable modifier

0x324: Integer Range Variable modifier

0x328: Floating Point Variable modifier

0x327: Vector Variable modifier

0x326: Point Variable modifier

0x136: Change Scene modifier

0x140: Return modifier

0x29a: Shared Scene modifier

0x2df: Set modifier

0x4d8: Save and Restore modifier

0x26c: Scene Transition modifier

0x276: Element Transition modifier

0x1fe: Simple Motion modifier

0x21b: Path Motion modifier

0x208: Drag Motion modifier

0x226: Vector Motion modifier

0x1a4: Sound Effect modifier

0x32a: Text Style modifier

0x334: Graphic modifier

0x4c4: Color Table modifier

0x4b0: Gradient modifier

0x384: Image Effect modifier

0xffffffff: Modifier from an extension - Known revisions: 0x03e9
	uint32_t unknown (0)
	uint32_t size including tag
	char[16] modifier name
	...

