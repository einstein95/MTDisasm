This covers the compiled format only (in packages).  Generally Windows is byte-swapped but some data is always big endian.

Primary header is 64 bytes (in normal conditions?), followed by the frame table and then frame data

Header block:
byte[4] zeros
uint32_t magic (0x546f6f6e)
uint16_t version (4)
byte[4] unknown
	Win: 00 00 1d 20
	Mac: 00 00 00 00
uint32_t encoding flags
	0x80 = temporal compression
	0x20 = frame ranges
	0x08 = trimming
	0x02 = Unknown
	0x01 = Unknown
RECT rect
uint16_t number of frames
byte[14] unknown - 0x00480000 might be fixed-point DPI
	Win: 00 00 0f 00 01 00  00 00 48 00  00 00 48 00 
	Mac: 00 00 00 0f 00 00  00 48 00 00  00 48 00 00
uint16_t bits per pixel
uint32_t codec id (mFactory Animation is ".RLE" big endian) - Uncompressed is 00 00 00 00
byte[16] unknown - Varies by platform, seems to be gibberish
	possible meaning:
		byte[4] unknown
		byte[4] unknown (ff ff ff ff for compressed)
		uint32_t size of codec info block?
		byte[4] unknown
FRAME_TABLE_ENTRY[number of frames]
If compressed, codec data:
	uint32_t size of codec definition (including this field)
	byte[size of codec definition - 4] codec definition
	Cinepak (86 bytes):
		'c' 'v' 'i' 'd' 00 00 00 00 00 00 00 00 00 01 00 01 'a' 'p' 'p' 'l' 00 00 04 00 00 00 04 00 00 78 00 78 00 48 00 00 00 48 00 00 00 00 00 00 00 01 07
		byte[32] "Cinepak" + nulls
		18 ff ff
uint32_t unknown (1)
uint32_t unknown (0x64)
uint32_t number of frame ranges
FRAME_RANGE frame ranges

FRAME_TABLE_ENTRY: 58 bytes on Mac and 56 bytes on Windows
	byte[4] unknown (0)
	RECT rect
	uint32_t data offset
	byte[2] unknown (0)
	uint32_t compressed size
	uint8_t unknown (ff)
	uint8_t keyframe
	uint8_t unknown (0 on Win, 1 on Mac)
	byte unknown
	RECT rect
	FIXED hdpi
	FIXED vdpi
	uint16_t bits per pixel
	uint32_t unknown
	uint16_t bytes per row
	Mac:
		byte[4] unknown
	Win:
		byte[2] unknown
	uint32_t decompressed size


FRAME_RANGE:
	uint32_t start frame
	uint32_t end frame
	uint16_t length of name
	char[length of name] name - null terminated


mToon RLE version 1 8-bit compression:
Sequence of RLE codes.  Runs can not run past the end of a row:
0: Transparent (temporal), next byte is number of transparent consecutive pixels
0x80-0xff: Literal, low 7 bits are number of bytes that follow.
0x01-0x7f: RLE, low 7 bits are number of repeats.  Single byte follows.

mToon RLE version 2 16-bit compression:
0: Transparent (temporal), next word is number of transparent consecutive pixels if the high bit is clear, or rows to skip in the low 15 bits if the high bit is set
0x8000-0xffff: Literal, low 15 bits are number of bytes that follow.
0x0001-0x7fff: RLE, low 15 bits are number of repeats.  Single byte follows.


High bit is literal flag, low 7 bits are length.  If the high bit is set, the next N bytes follow.  If the high bit is clear, then the next byte is repeated length times.




RLE compressed frame looks like:
	'RLE ' for keyframes, 00 00 00 01 for temporal frames
	01 00 00 01 (version 1) or 10 00 00 02 ( version 2)
	uint32_t width (big endian)
	uint32_t height (big endian)
	uint32_t total frame size (including RLE tag and header)
	frame data

On Windows, frames are bottom-up, on Mac they're top-down

Temporally-compressed mToon frames MAY NOT BE THE SAME SIZE AS THE FRAME PROVIDED and are generally the same size every frame.





